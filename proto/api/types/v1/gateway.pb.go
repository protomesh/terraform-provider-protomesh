// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: api/types/v1/gateway.proto

package typesv1

import (
	_ "github.com/protomesh/protoc-gen-terraform/proto/terraform"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Gateway is a Protomesh gateway policy.
type GatewayPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the gateway policy.
	//
	// Types that are assignable to Source:
	//
	//	*GatewayPolicy_Http
	//	*GatewayPolicy_Grpc
	Source isGatewayPolicy_Source `protobuf_oneof:"source"`
	// Handlers are the handlers to invoke when the source matches.
	// Each result of each handler is passed to the next handler.
	// When an error occurs, the error is returned to the client.
	Handlers []*GatewayPolicy_Handler `protobuf:"bytes,3,rep,name=handlers,proto3" json:"handlers,omitempty"`
}

func (x *GatewayPolicy) Reset() {
	*x = GatewayPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayPolicy) ProtoMessage() {}

func (x *GatewayPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayPolicy.ProtoReflect.Descriptor instead.
func (*GatewayPolicy) Descriptor() ([]byte, []int) {
	return file_api_types_v1_gateway_proto_rawDescGZIP(), []int{0}
}

func (m *GatewayPolicy) GetSource() isGatewayPolicy_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *GatewayPolicy) GetHttp() *HttpSource {
	if x, ok := x.GetSource().(*GatewayPolicy_Http); ok {
		return x.Http
	}
	return nil
}

func (x *GatewayPolicy) GetGrpc() *GrpcSource {
	if x, ok := x.GetSource().(*GatewayPolicy_Grpc); ok {
		return x.Grpc
	}
	return nil
}

func (x *GatewayPolicy) GetHandlers() []*GatewayPolicy_Handler {
	if x != nil {
		return x.Handlers
	}
	return nil
}

type isGatewayPolicy_Source interface {
	isGatewayPolicy_Source()
}

type GatewayPolicy_Http struct {
	Http *HttpSource `protobuf:"bytes,1,opt,name=http,proto3,oneof"`
}

type GatewayPolicy_Grpc struct {
	Grpc *GrpcSource `protobuf:"bytes,2,opt,name=grpc,proto3,oneof"`
}

func (*GatewayPolicy_Http) isGatewayPolicy_Source() {}

func (*GatewayPolicy_Grpc) isGatewayPolicy_Source() {}

// HttpSource is used by the Protomesh gateway to handle HTTP requests.
type HttpSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HTTP method to match against the URL.
	// If you speicify HTT_METHOD_UNDEFINED, the method is not considered when
	// matching.
	Method HttpMethod `protobuf:"varint,1,opt,name=method,proto3,enum=protomesh.types.v1.HttpMethod" json:"method,omitempty"`
	// Path to match against the URL.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// If true, the path must match exactly.
	// Otherwise, the path must match using the prefix match semantics (Radix Tree match longest operation).
	ExactPathMatch bool `protobuf:"varint,3,opt,name=exact_path_match,json=exactPathMatch,proto3" json:"exact_path_match,omitempty"`
}

func (x *HttpSource) Reset() {
	*x = HttpSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpSource) ProtoMessage() {}

func (x *HttpSource) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpSource.ProtoReflect.Descriptor instead.
func (*HttpSource) Descriptor() ([]byte, []int) {
	return file_api_types_v1_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *HttpSource) GetMethod() HttpMethod {
	if x != nil {
		return x.Method
	}
	return HttpMethod_HTTP_METHOD_UNDEFINED
}

func (x *HttpSource) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HttpSource) GetExactPathMatch() bool {
	if x != nil {
		return x.ExactPathMatch
	}
	return false
}

// GrpcSource is used by the Protomesh gateway to handle gRPC method calls.
type GrpcSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full method name of the gRPC method (/my.package.GrpcService/GrpcMethod).
	MethodName string `protobuf:"bytes,1,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	// If true, the method name must match exactly.
	// Otherwise, the method name must match using the prefix match semantics (Radix Tree match longest operation).
	ExactMethodNameMatch bool `protobuf:"varint,2,opt,name=exact_method_name_match,json=exactMethodNameMatch,proto3" json:"exact_method_name_match,omitempty"`
}

func (x *GrpcSource) Reset() {
	*x = GrpcSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcSource) ProtoMessage() {}

func (x *GrpcSource) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcSource.ProtoReflect.Descriptor instead.
func (*GrpcSource) Descriptor() ([]byte, []int) {
	return file_api_types_v1_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *GrpcSource) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *GrpcSource) GetExactMethodNameMatch() bool {
	if x != nil {
		return x.ExactMethodNameMatch
	}
	return false
}

type AwsHandler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// handler is the AWS handler specifier.
	//
	// Types that are assignable to Handler:
	//
	//	*AwsHandler_Lambda
	Handler isAwsHandler_Handler `protobuf_oneof:"handler"`
}

func (x *AwsHandler) Reset() {
	*x = AwsHandler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_gateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsHandler) ProtoMessage() {}

func (x *AwsHandler) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_gateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsHandler.ProtoReflect.Descriptor instead.
func (*AwsHandler) Descriptor() ([]byte, []int) {
	return file_api_types_v1_gateway_proto_rawDescGZIP(), []int{3}
}

func (m *AwsHandler) GetHandler() isAwsHandler_Handler {
	if m != nil {
		return m.Handler
	}
	return nil
}

func (x *AwsHandler) GetLambda() *AwsHandler_LambdaFunction {
	if x, ok := x.GetHandler().(*AwsHandler_Lambda); ok {
		return x.Lambda
	}
	return nil
}

type isAwsHandler_Handler interface {
	isAwsHandler_Handler()
}

type AwsHandler_Lambda struct {
	// Lambda function handler.
	Lambda *AwsHandler_LambdaFunction `protobuf:"bytes,1,opt,name=lambda,proto3,oneof"`
}

func (*AwsHandler_Lambda) isAwsHandler_Handler() {}

// Handlers are the handlers to invoke when the source matches.
type GatewayPolicy_Handler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Handler:
	//
	//	*GatewayPolicy_Handler_Aws
	Handler isGatewayPolicy_Handler_Handler `protobuf_oneof:"handler"`
}

func (x *GatewayPolicy_Handler) Reset() {
	*x = GatewayPolicy_Handler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_gateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayPolicy_Handler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayPolicy_Handler) ProtoMessage() {}

func (x *GatewayPolicy_Handler) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_gateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayPolicy_Handler.ProtoReflect.Descriptor instead.
func (*GatewayPolicy_Handler) Descriptor() ([]byte, []int) {
	return file_api_types_v1_gateway_proto_rawDescGZIP(), []int{0, 0}
}

func (m *GatewayPolicy_Handler) GetHandler() isGatewayPolicy_Handler_Handler {
	if m != nil {
		return m.Handler
	}
	return nil
}

func (x *GatewayPolicy_Handler) GetAws() *AwsHandler {
	if x, ok := x.GetHandler().(*GatewayPolicy_Handler_Aws); ok {
		return x.Aws
	}
	return nil
}

type isGatewayPolicy_Handler_Handler interface {
	isGatewayPolicy_Handler_Handler()
}

type GatewayPolicy_Handler_Aws struct {
	Aws *AwsHandler `protobuf:"bytes,1,opt,name=aws,proto3,oneof"`
}

func (*GatewayPolicy_Handler_Aws) isGatewayPolicy_Handler_Handler() {}

// Lambda function name or ARN.
type AwsHandler_LambdaFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Lambda function name or ARN.
	FunctionName string `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	// Version name of Lambda (default $LATEST).
	Qualifier string `protobuf:"bytes,2,opt,name=qualifier,proto3" json:"qualifier,omitempty"`
}

func (x *AwsHandler_LambdaFunction) Reset() {
	*x = AwsHandler_LambdaFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_gateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsHandler_LambdaFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsHandler_LambdaFunction) ProtoMessage() {}

func (x *AwsHandler_LambdaFunction) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_gateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsHandler_LambdaFunction.ProtoReflect.Descriptor instead.
func (*AwsHandler_LambdaFunction) Descriptor() ([]byte, []int) {
	return file_api_types_v1_gateway_proto_rawDescGZIP(), []int{3, 0}
}

func (x *AwsHandler_LambdaFunction) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *AwsHandler_LambdaFunction) GetQualifier() string {
	if x != nil {
		return x.Qualifier
	}
	return ""
}

var File_api_types_v1_gateway_proto protoreflect.FileDescriptor

var file_api_types_v1_gateway_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6,
	0x02, 0x0a, 0x0d, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x34, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x12, 0x45, 0x0a, 0x08,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x73, 0x1a, 0x50, 0x0a, 0x07, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x32,
	0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x77, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x03, 0x61,
	0x77, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x02, 0x02, 0x08, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x3a, 0x06, 0xba, 0xb9, 0x02, 0x02, 0x08, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x0a, 0x48, 0x74, 0x74, 0x70,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x78,
	0x61, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x3a, 0x06, 0xba, 0xb9,
	0x02, 0x02, 0x08, 0x01, 0x22, 0x6c, 0x0a, 0x0a, 0x47, 0x72, 0x70, 0x63, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x78, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x3a, 0x06, 0xba, 0xb9, 0x02, 0x02,
	0x08, 0x01, 0x22, 0xc5, 0x01, 0x0a, 0x0a, 0x41, 0x77, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x12, 0x47, 0x0a, 0x06, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x2e, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x06, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x1a, 0x5b, 0x0a, 0x0e, 0x4c, 0x61,
	0x6d, 0x62, 0x64, 0x61, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x3a,
	0x06, 0xba, 0xb9, 0x02, 0x02, 0x08, 0x01, 0x3a, 0x06, 0xba, 0xb9, 0x02, 0x02, 0x08, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x42, 0xde, 0x01, 0x0a, 0x16, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x74, 0x65, 0x72, 0x72,
	0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x54, 0x58, 0xaa, 0x02, 0x12, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x5c, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x5c,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68,
	0x3a, 0x3a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_types_v1_gateway_proto_rawDescOnce sync.Once
	file_api_types_v1_gateway_proto_rawDescData = file_api_types_v1_gateway_proto_rawDesc
)

func file_api_types_v1_gateway_proto_rawDescGZIP() []byte {
	file_api_types_v1_gateway_proto_rawDescOnce.Do(func() {
		file_api_types_v1_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_types_v1_gateway_proto_rawDescData)
	})
	return file_api_types_v1_gateway_proto_rawDescData
}

var file_api_types_v1_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_api_types_v1_gateway_proto_goTypes = []interface{}{
	(*GatewayPolicy)(nil),             // 0: protomesh.types.v1.GatewayPolicy
	(*HttpSource)(nil),                // 1: protomesh.types.v1.HttpSource
	(*GrpcSource)(nil),                // 2: protomesh.types.v1.GrpcSource
	(*AwsHandler)(nil),                // 3: protomesh.types.v1.AwsHandler
	(*GatewayPolicy_Handler)(nil),     // 4: protomesh.types.v1.GatewayPolicy.Handler
	(*AwsHandler_LambdaFunction)(nil), // 5: protomesh.types.v1.AwsHandler.LambdaFunction
	(HttpMethod)(0),                   // 6: protomesh.types.v1.HttpMethod
}
var file_api_types_v1_gateway_proto_depIdxs = []int32{
	1, // 0: protomesh.types.v1.GatewayPolicy.http:type_name -> protomesh.types.v1.HttpSource
	2, // 1: protomesh.types.v1.GatewayPolicy.grpc:type_name -> protomesh.types.v1.GrpcSource
	4, // 2: protomesh.types.v1.GatewayPolicy.handlers:type_name -> protomesh.types.v1.GatewayPolicy.Handler
	6, // 3: protomesh.types.v1.HttpSource.method:type_name -> protomesh.types.v1.HttpMethod
	5, // 4: protomesh.types.v1.AwsHandler.lambda:type_name -> protomesh.types.v1.AwsHandler.LambdaFunction
	3, // 5: protomesh.types.v1.GatewayPolicy.Handler.aws:type_name -> protomesh.types.v1.AwsHandler
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_api_types_v1_gateway_proto_init() }
func file_api_types_v1_gateway_proto_init() {
	if File_api_types_v1_gateway_proto != nil {
		return
	}
	file_api_types_v1_networking_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_types_v1_gateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_gateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_gateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_gateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsHandler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_gateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayPolicy_Handler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_gateway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsHandler_LambdaFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_types_v1_gateway_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*GatewayPolicy_Http)(nil),
		(*GatewayPolicy_Grpc)(nil),
	}
	file_api_types_v1_gateway_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*AwsHandler_Lambda)(nil),
	}
	file_api_types_v1_gateway_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*GatewayPolicy_Handler_Aws)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_types_v1_gateway_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_types_v1_gateway_proto_goTypes,
		DependencyIndexes: file_api_types_v1_gateway_proto_depIdxs,
		MessageInfos:      file_api_types_v1_gateway_proto_msgTypes,
	}.Build()
	File_api_types_v1_gateway_proto = out.File
	file_api_types_v1_gateway_proto_rawDesc = nil
	file_api_types_v1_gateway_proto_goTypes = nil
	file_api_types_v1_gateway_proto_depIdxs = nil
}
