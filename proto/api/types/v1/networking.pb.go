// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: api/types/v1/networking.proto

package typesv1

import (
	_ "github.com/protomesh/protoc-gen-terraform/proto/terraform"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HttpMethod is the HTTP method.
type HttpMethod int32

const (
	HttpMethod_HTTP_METHOD_UNDEFINED HttpMethod = 0
	HttpMethod_HTTP_METHOD_GET       HttpMethod = 1
	HttpMethod_HTTP_METHOD_HEAD      HttpMethod = 2
	HttpMethod_HTTP_METHOD_POST      HttpMethod = 3
	HttpMethod_HTTP_METHOD_PUT       HttpMethod = 4
	HttpMethod_HTTP_METHOD_DELETE    HttpMethod = 5
	HttpMethod_HTTP_METHOD_CONNECT   HttpMethod = 6
	HttpMethod_HTTP_METHOD_OPTIONS   HttpMethod = 7
	HttpMethod_HTTP_METHOD_TRACE     HttpMethod = 8
	HttpMethod_HTTP_METHOD_PATCH     HttpMethod = 9
)

// Enum value maps for HttpMethod.
var (
	HttpMethod_name = map[int32]string{
		0: "HTTP_METHOD_UNDEFINED",
		1: "HTTP_METHOD_GET",
		2: "HTTP_METHOD_HEAD",
		3: "HTTP_METHOD_POST",
		4: "HTTP_METHOD_PUT",
		5: "HTTP_METHOD_DELETE",
		6: "HTTP_METHOD_CONNECT",
		7: "HTTP_METHOD_OPTIONS",
		8: "HTTP_METHOD_TRACE",
		9: "HTTP_METHOD_PATCH",
	}
	HttpMethod_value = map[string]int32{
		"HTTP_METHOD_UNDEFINED": 0,
		"HTTP_METHOD_GET":       1,
		"HTTP_METHOD_HEAD":      2,
		"HTTP_METHOD_POST":      3,
		"HTTP_METHOD_PUT":       4,
		"HTTP_METHOD_DELETE":    5,
		"HTTP_METHOD_CONNECT":   6,
		"HTTP_METHOD_OPTIONS":   7,
		"HTTP_METHOD_TRACE":     8,
		"HTTP_METHOD_PATCH":     9,
	}
)

func (x HttpMethod) Enum() *HttpMethod {
	p := new(HttpMethod)
	*p = x
	return p
}

func (x HttpMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_api_types_v1_networking_proto_enumTypes[0].Descriptor()
}

func (HttpMethod) Type() protoreflect.EnumType {
	return &file_api_types_v1_networking_proto_enumTypes[0]
}

func (x HttpMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpMethod.Descriptor instead.
func (HttpMethod) EnumDescriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{0}
}

// Transport protocols.
type TransportProtocol int32

const (
	TransportProtocol_TRANSPORT_PROTOCOL_UNDEFINED TransportProtocol = 0
	TransportProtocol_TRANSPORT_PROTOCOL_TCP       TransportProtocol = 1
	TransportProtocol_TRANSPORT_PROTOCOL_UDP       TransportProtocol = 2
)

// Enum value maps for TransportProtocol.
var (
	TransportProtocol_name = map[int32]string{
		0: "TRANSPORT_PROTOCOL_UNDEFINED",
		1: "TRANSPORT_PROTOCOL_TCP",
		2: "TRANSPORT_PROTOCOL_UDP",
	}
	TransportProtocol_value = map[string]int32{
		"TRANSPORT_PROTOCOL_UNDEFINED": 0,
		"TRANSPORT_PROTOCOL_TCP":       1,
		"TRANSPORT_PROTOCOL_UDP":       2,
	}
)

func (x TransportProtocol) Enum() *TransportProtocol {
	p := new(TransportProtocol)
	*p = x
	return p
}

func (x TransportProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransportProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_api_types_v1_networking_proto_enumTypes[1].Descriptor()
}

func (TransportProtocol) Type() protoreflect.EnumType {
	return &file_api_types_v1_networking_proto_enumTypes[1]
}

func (x TransportProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransportProtocol.Descriptor instead.
func (TransportProtocol) EnumDescriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{1}
}

// Application protocols.
type ApplicationProtocol int32

const (
	ApplicationProtocol_APPLICATION_PROTOCOL_UNDEFINED ApplicationProtocol = 0
	ApplicationProtocol_APPLICATION_PROTOCOL_HTTP1     ApplicationProtocol = 1
	ApplicationProtocol_APPLICATION_PROTOCOL_HTTP2     ApplicationProtocol = 2
)

// Enum value maps for ApplicationProtocol.
var (
	ApplicationProtocol_name = map[int32]string{
		0: "APPLICATION_PROTOCOL_UNDEFINED",
		1: "APPLICATION_PROTOCOL_HTTP1",
		2: "APPLICATION_PROTOCOL_HTTP2",
	}
	ApplicationProtocol_value = map[string]int32{
		"APPLICATION_PROTOCOL_UNDEFINED": 0,
		"APPLICATION_PROTOCOL_HTTP1":     1,
		"APPLICATION_PROTOCOL_HTTP2":     2,
	}
)

func (x ApplicationProtocol) Enum() *ApplicationProtocol {
	p := new(ApplicationProtocol)
	*p = x
	return p
}

func (x ApplicationProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplicationProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_api_types_v1_networking_proto_enumTypes[2].Descriptor()
}

func (ApplicationProtocol) Type() protoreflect.EnumType {
	return &file_api_types_v1_networking_proto_enumTypes[2]
}

func (x ApplicationProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplicationProtocol.Descriptor instead.
func (ApplicationProtocol) EnumDescriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{2}
}

// NetworkingNode is a wrapper message to networking nodes in the service mesh.
type NetworkingNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Available newtorking nodes.
	//
	// Types that are assignable to NetworkingNode:
	//
	//	*NetworkingNode_HttpIngress
	//	*NetworkingNode_Service
	//	*NetworkingNode_RoutingPolicy
	//	*NetworkingNode_InstanceSet
	NetworkingNode isNetworkingNode_NetworkingNode `protobuf_oneof:"networking_node"`
}

func (x *NetworkingNode) Reset() {
	*x = NetworkingNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkingNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkingNode) ProtoMessage() {}

func (x *NetworkingNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkingNode.ProtoReflect.Descriptor instead.
func (*NetworkingNode) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{0}
}

func (m *NetworkingNode) GetNetworkingNode() isNetworkingNode_NetworkingNode {
	if m != nil {
		return m.NetworkingNode
	}
	return nil
}

func (x *NetworkingNode) GetHttpIngress() *HttpIngress {
	if x, ok := x.GetNetworkingNode().(*NetworkingNode_HttpIngress); ok {
		return x.HttpIngress
	}
	return nil
}

func (x *NetworkingNode) GetService() *Service {
	if x, ok := x.GetNetworkingNode().(*NetworkingNode_Service); ok {
		return x.Service
	}
	return nil
}

func (x *NetworkingNode) GetRoutingPolicy() *RoutingPolicy {
	if x, ok := x.GetNetworkingNode().(*NetworkingNode_RoutingPolicy); ok {
		return x.RoutingPolicy
	}
	return nil
}

func (x *NetworkingNode) GetInstanceSet() *InstanceSet {
	if x, ok := x.GetNetworkingNode().(*NetworkingNode_InstanceSet); ok {
		return x.InstanceSet
	}
	return nil
}

type isNetworkingNode_NetworkingNode interface {
	isNetworkingNode_NetworkingNode()
}

type NetworkingNode_HttpIngress struct {
	// HttpIngress node.
	HttpIngress *HttpIngress `protobuf:"bytes,1,opt,name=http_ingress,json=httpIngress,proto3,oneof"`
}

type NetworkingNode_Service struct {
	// Service node.
	Service *Service `protobuf:"bytes,2,opt,name=service,proto3,oneof"`
}

type NetworkingNode_RoutingPolicy struct {
	// RoutingPolicy node.
	RoutingPolicy *RoutingPolicy `protobuf:"bytes,3,opt,name=routing_policy,json=routingPolicy,proto3,oneof"`
}

type NetworkingNode_InstanceSet struct {
	// InstanceSet node.
	InstanceSet *InstanceSet `protobuf:"bytes,5,opt,name=instance_set,json=instanceSet,proto3,oneof"`
}

func (*NetworkingNode_HttpIngress) isNetworkingNode_NetworkingNode() {}

func (*NetworkingNode_Service) isNetworkingNode_NetworkingNode() {}

func (*NetworkingNode_RoutingPolicy) isNetworkingNode_NetworkingNode() {}

func (*NetworkingNode_InstanceSet) isNetworkingNode_NetworkingNode() {}

// HttpFilter is used to abstract Envoy HTTP filters.
type HttpFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Wrapper to specify a valid HTTP filter.
	//
	// Types that are assignable to Filter:
	//
	//	*HttpFilter_Cors_
	//	*HttpFilter_HealthCheck_
	//	*HttpFilter_GrpcWeb_
	//	*HttpFilter_JwtAuthn_
	Filter isHttpFilter_Filter `protobuf_oneof:"filter"`
}

func (x *HttpFilter) Reset() {
	*x = HttpFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpFilter) ProtoMessage() {}

func (x *HttpFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpFilter.ProtoReflect.Descriptor instead.
func (*HttpFilter) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{1}
}

func (m *HttpFilter) GetFilter() isHttpFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *HttpFilter) GetCors() *HttpFilter_Cors {
	if x, ok := x.GetFilter().(*HttpFilter_Cors_); ok {
		return x.Cors
	}
	return nil
}

func (x *HttpFilter) GetHealthCheck() *HttpFilter_HealthCheck {
	if x, ok := x.GetFilter().(*HttpFilter_HealthCheck_); ok {
		return x.HealthCheck
	}
	return nil
}

func (x *HttpFilter) GetGrpcWeb() *HttpFilter_GrpcWeb {
	if x, ok := x.GetFilter().(*HttpFilter_GrpcWeb_); ok {
		return x.GrpcWeb
	}
	return nil
}

func (x *HttpFilter) GetJwtAuthn() *HttpFilter_JwtAuthn {
	if x, ok := x.GetFilter().(*HttpFilter_JwtAuthn_); ok {
		return x.JwtAuthn
	}
	return nil
}

type isHttpFilter_Filter interface {
	isHttpFilter_Filter()
}

type HttpFilter_Cors_ struct {
	// Cors filter.
	Cors *HttpFilter_Cors `protobuf:"bytes,1,opt,name=cors,proto3,oneof"`
}

type HttpFilter_HealthCheck_ struct {
	// Health check filter.
	HealthCheck *HttpFilter_HealthCheck `protobuf:"bytes,2,opt,name=health_check,json=healthCheck,proto3,oneof"`
}

type HttpFilter_GrpcWeb_ struct {
	// grpc-web filter.
	GrpcWeb *HttpFilter_GrpcWeb `protobuf:"bytes,3,opt,name=grpc_web,json=grpcWeb,proto3,oneof"`
}

type HttpFilter_JwtAuthn_ struct {
	// JWT Authentication filter.
	JwtAuthn *HttpFilter_JwtAuthn `protobuf:"bytes,4,opt,name=jwt_authn,json=jwtAuthn,proto3,oneof"`
}

func (*HttpFilter_Cors_) isHttpFilter_Filter() {}

func (*HttpFilter_HealthCheck_) isHttpFilter_Filter() {}

func (*HttpFilter_GrpcWeb_) isHttpFilter_Filter() {}

func (*HttpFilter_JwtAuthn_) isHttpFilter_Filter() {}

// HttpIngress represents an ingress proxy listener.
type HttpIngress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// XDS cluster name: must be the same of the envoy config to be matched by
	// xDS server.
	XdsClusterName string `protobuf:"bytes,1,opt,name=xds_cluster_name,json=xdsClusterName,proto3" json:"xds_cluster_name,omitempty"`
	// Ingress name (used as route config name for the route specifier).
	IngressName string `protobuf:"bytes,2,opt,name=ingress_name,json=ingressName,proto3" json:"ingress_name,omitempty"`
	// Ingress port to listen for incoming requests.
	ListenPort int32 `protobuf:"varint,3,opt,name=listen_port,json=listenPort,proto3" json:"listen_port,omitempty"`
	// Http filters to apply to the ingress listener.
	HttpFilters []*HttpFilter `protobuf:"bytes,4,rep,name=http_filters,json=httpFilters,proto3" json:"http_filters,omitempty"`
}

func (x *HttpIngress) Reset() {
	*x = HttpIngress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpIngress) ProtoMessage() {}

func (x *HttpIngress) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpIngress.ProtoReflect.Descriptor instead.
func (*HttpIngress) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{2}
}

func (x *HttpIngress) GetXdsClusterName() string {
	if x != nil {
		return x.XdsClusterName
	}
	return ""
}

func (x *HttpIngress) GetIngressName() string {
	if x != nil {
		return x.IngressName
	}
	return ""
}

func (x *HttpIngress) GetListenPort() int32 {
	if x != nil {
		return x.ListenPort
	}
	return 0
}

func (x *HttpIngress) GetHttpFilters() []*HttpFilter {
	if x != nil {
		return x.HttpFilters
	}
	return nil
}

// InstanceSet is a group of instances that provides the same service through a well known port.
type InstanceSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instances in this set.
	Instances []*InstanceSet_Instance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
	// Services names to match instan
	MatchServiceNames []string `protobuf:"bytes,2,rep,name=match_service_names,json=matchServiceNames,proto3" json:"match_service_names,omitempty"`
}

func (x *InstanceSet) Reset() {
	*x = InstanceSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSet) ProtoMessage() {}

func (x *InstanceSet) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSet.ProtoReflect.Descriptor instead.
func (*InstanceSet) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{3}
}

func (x *InstanceSet) GetInstances() []*InstanceSet_Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *InstanceSet) GetMatchServiceNames() []string {
	if x != nil {
		return x.MatchServiceNames
	}
	return nil
}

// Service represents a downstream target for envoy (Cluster)
type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// XDS cluster name: must be the same of the envoy config to be matched by
	// xDS server.
	XdsClusterName string `protobuf:"bytes,2,opt,name=xds_cluster_name,json=xdsClusterName,proto3" json:"xds_cluster_name,omitempty"`
	// Service name (or "cluster" name in Envoy xDS).
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Timeout to connect to upstream.
	ConnectTimeout *durationpb.Duration `protobuf:"bytes,3,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	// Which protocol to connect to upstream.
	//
	// Types that are assignable to InstanceApplicationProtocolOptions:
	//
	//	*Service_InstanceHttp1Options
	//	*Service_InstanceHttp2Options
	InstanceApplicationProtocolOptions isService_InstanceApplicationProtocolOptions `protobuf_oneof:"instance_application_protocol_options"`
	// Enable TLS transport to connect to upstream.
	EnableTlsTransport bool `protobuf:"varint,6,opt,name=enable_tls_transport,json=enableTlsTransport,proto3" json:"enable_tls_transport,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{4}
}

func (x *Service) GetXdsClusterName() string {
	if x != nil {
		return x.XdsClusterName
	}
	return ""
}

func (x *Service) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Service) GetConnectTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectTimeout
	}
	return nil
}

func (m *Service) GetInstanceApplicationProtocolOptions() isService_InstanceApplicationProtocolOptions {
	if m != nil {
		return m.InstanceApplicationProtocolOptions
	}
	return nil
}

func (x *Service) GetInstanceHttp1Options() *Service_Http1Options {
	if x, ok := x.GetInstanceApplicationProtocolOptions().(*Service_InstanceHttp1Options); ok {
		return x.InstanceHttp1Options
	}
	return nil
}

func (x *Service) GetInstanceHttp2Options() *Service_Http2Options {
	if x, ok := x.GetInstanceApplicationProtocolOptions().(*Service_InstanceHttp2Options); ok {
		return x.InstanceHttp2Options
	}
	return nil
}

func (x *Service) GetEnableTlsTransport() bool {
	if x != nil {
		return x.EnableTlsTransport
	}
	return false
}

type isService_InstanceApplicationProtocolOptions interface {
	isService_InstanceApplicationProtocolOptions()
}

type Service_InstanceHttp1Options struct {
	// Http1Options options.
	InstanceHttp1Options *Service_Http1Options `protobuf:"bytes,4,opt,name=instance_http1_options,json=instanceHttp1Options,proto3,oneof"`
}

type Service_InstanceHttp2Options struct {
	// Http2Options options.
	InstanceHttp2Options *Service_Http2Options `protobuf:"bytes,5,opt,name=instance_http2_options,json=instanceHttp2Options,proto3,oneof"`
}

func (*Service_InstanceHttp1Options) isService_InstanceApplicationProtocolOptions() {}

func (*Service_InstanceHttp2Options) isService_InstanceApplicationProtocolOptions() {}

// Represents a routing policy for the control plane (Envoy Virtual Host).
type RoutingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ingress name to match this routing policy.
	IngressName string `protobuf:"bytes,1,opt,name=ingress_name,json=ingressName,proto3" json:"ingress_name,omitempty"`
	// Routes in this routing policy.
	Routes []*RoutingPolicy_Route `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`
	// Cors policy to apply in this routing policy.
	Cors *RoutingPolicy_Cors `protobuf:"bytes,3,opt,name=cors,proto3" json:"cors,omitempty"`
	// XDS cluster name: must be the same of the envoy config to be matched by
	// xDS server
	XdsClusterName string `protobuf:"bytes,4,opt,name=xds_cluster_name,json=xdsClusterName,proto3" json:"xds_cluster_name,omitempty"`
	// Domain to match (you can use wildcard domains).
	Domain string `protobuf:"bytes,5,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *RoutingPolicy) Reset() {
	*x = RoutingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy) ProtoMessage() {}

func (x *RoutingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy.ProtoReflect.Descriptor instead.
func (*RoutingPolicy) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{5}
}

func (x *RoutingPolicy) GetIngressName() string {
	if x != nil {
		return x.IngressName
	}
	return ""
}

func (x *RoutingPolicy) GetRoutes() []*RoutingPolicy_Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *RoutingPolicy) GetCors() *RoutingPolicy_Cors {
	if x != nil {
		return x.Cors
	}
	return nil
}

func (x *RoutingPolicy) GetXdsClusterName() string {
	if x != nil {
		return x.XdsClusterName
	}
	return ""
}

func (x *RoutingPolicy) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

// HealthCheck enables the [http health check filter](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/health_check_filter#config-http-filters-health-check).
type HttpFilter_HealthCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path is equivalent to check the "path" header in the HTTP request.
	// Usually this is set to "/healthz".
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *HttpFilter_HealthCheck) Reset() {
	*x = HttpFilter_HealthCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpFilter_HealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpFilter_HealthCheck) ProtoMessage() {}

func (x *HttpFilter_HealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpFilter_HealthCheck.ProtoReflect.Descriptor instead.
func (*HttpFilter_HealthCheck) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{1, 0}
}

func (x *HttpFilter_HealthCheck) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Cors enables the [http cors filter](https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/cors/v3/cors.proto).
type HttpFilter_Cors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable the cors filter.
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *HttpFilter_Cors) Reset() {
	*x = HttpFilter_Cors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpFilter_Cors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpFilter_Cors) ProtoMessage() {}

func (x *HttpFilter_Cors) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpFilter_Cors.ProtoReflect.Descriptor instead.
func (*HttpFilter_Cors) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{1, 1}
}

func (x *HttpFilter_Cors) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

// GrpcWeb enables the [grpc-web filter](https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/grpc_web/v3/grpc_web.proto).
type HttpFilter_GrpcWeb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable the grpc-web filter.
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *HttpFilter_GrpcWeb) Reset() {
	*x = HttpFilter_GrpcWeb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpFilter_GrpcWeb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpFilter_GrpcWeb) ProtoMessage() {}

func (x *HttpFilter_GrpcWeb) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpFilter_GrpcWeb.ProtoReflect.Descriptor instead.
func (*HttpFilter_GrpcWeb) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{1, 2}
}

func (x *HttpFilter_GrpcWeb) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

// JwtAuthn enables the [JWT authentication filter](https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/jwt_authn/v3/config.proto).
type HttpFilter_JwtAuthn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of providers.
	Providers []*HttpFilter_JwtAuthn_Provider `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
	// List of rules.
	Rules []*HttpFilter_JwtAuthn_Rule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *HttpFilter_JwtAuthn) Reset() {
	*x = HttpFilter_JwtAuthn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpFilter_JwtAuthn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpFilter_JwtAuthn) ProtoMessage() {}

func (x *HttpFilter_JwtAuthn) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpFilter_JwtAuthn.ProtoReflect.Descriptor instead.
func (*HttpFilter_JwtAuthn) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{1, 3}
}

func (x *HttpFilter_JwtAuthn) GetProviders() []*HttpFilter_JwtAuthn_Provider {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *HttpFilter_JwtAuthn) GetRules() []*HttpFilter_JwtAuthn_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// ClaimToHeader extracts claim's value from JWT token to put in header.
// This is used for example to get the user id from the sub claim.
type HttpFilter_JwtAuthn_ClaimToHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HeaderName is the header name to put the acquired value.
	HeaderName string `protobuf:"bytes,1,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"`
	// ClaimName is the claim in the JWT token to acquire the value.
	ClaimName string `protobuf:"bytes,2,opt,name=claim_name,json=claimName,proto3" json:"claim_name,omitempty"`
}

func (x *HttpFilter_JwtAuthn_ClaimToHeader) Reset() {
	*x = HttpFilter_JwtAuthn_ClaimToHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpFilter_JwtAuthn_ClaimToHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpFilter_JwtAuthn_ClaimToHeader) ProtoMessage() {}

func (x *HttpFilter_JwtAuthn_ClaimToHeader) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpFilter_JwtAuthn_ClaimToHeader.ProtoReflect.Descriptor instead.
func (*HttpFilter_JwtAuthn_ClaimToHeader) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{1, 3, 0}
}

func (x *HttpFilter_JwtAuthn_ClaimToHeader) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

func (x *HttpFilter_JwtAuthn_ClaimToHeader) GetClaimName() string {
	if x != nil {
		return x.ClaimName
	}
	return ""
}

// JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP URI and how the fetched JWKS should be cached.
type HttpFilter_JwtAuthn_RemoteJwks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpUri     string               `protobuf:"bytes,1,opt,name=http_uri,json=httpUri,proto3" json:"http_uri,omitempty"`
	ClusterName string               `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Timeout     *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *HttpFilter_JwtAuthn_RemoteJwks) Reset() {
	*x = HttpFilter_JwtAuthn_RemoteJwks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpFilter_JwtAuthn_RemoteJwks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpFilter_JwtAuthn_RemoteJwks) ProtoMessage() {}

func (x *HttpFilter_JwtAuthn_RemoteJwks) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpFilter_JwtAuthn_RemoteJwks.ProtoReflect.Descriptor instead.
func (*HttpFilter_JwtAuthn_RemoteJwks) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{1, 3, 1}
}

func (x *HttpFilter_JwtAuthn_RemoteJwks) GetHttpUri() string {
	if x != nil {
		return x.HttpUri
	}
	return ""
}

func (x *HttpFilter_JwtAuthn_RemoteJwks) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *HttpFilter_JwtAuthn_RemoteJwks) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

// FromHeader specify headers to get the JWT from.
type HttpFilter_JwtAuthn_FromHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the header name to get the JWT. Example: "Authorization"
	HeaderName string `protobuf:"bytes,1,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"`
	// ValuePrefix specifies a prefix in the value before the JWT token to be removed.
	// Example: "Bearer "
	ValuePrefix string `protobuf:"bytes,2,opt,name=value_prefix,json=valuePrefix,proto3" json:"value_prefix,omitempty"`
}

func (x *HttpFilter_JwtAuthn_FromHeader) Reset() {
	*x = HttpFilter_JwtAuthn_FromHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpFilter_JwtAuthn_FromHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpFilter_JwtAuthn_FromHeader) ProtoMessage() {}

func (x *HttpFilter_JwtAuthn_FromHeader) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpFilter_JwtAuthn_FromHeader.ProtoReflect.Descriptor instead.
func (*HttpFilter_JwtAuthn_FromHeader) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{1, 3, 2}
}

func (x *HttpFilter_JwtAuthn_FromHeader) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

func (x *HttpFilter_JwtAuthn_FromHeader) GetValuePrefix() string {
	if x != nil {
		return x.ValuePrefix
	}
	return ""
}

// Specify the JWT trusted signature provider.
type HttpFilter_JwtAuthn_Provider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provider name to be used in the rules for matching requests.
	ProviderName string `protobuf:"bytes,1,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	// Forward the JWT token to the upstream.
	Forward bool `protobuf:"varint,2,opt,name=forward,proto3" json:"forward,omitempty"`
	// Specify the principal that issued the JWT, usually a URL or an email address.
	// It is optional. If specified, it has to match the iss field in JWT, otherwise the JWT iss field is not checked.
	Issuer string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// The list of JWT audiences are allowed to access.
	// A JWT containing any of these audiences will be accepted.
	// If not specified, will not check audiences in the token.
	Audiences []string `protobuf:"bytes,4,rep,name=audiences,proto3" json:"audiences,omitempty"`
	// JWKS can be fetched from remote server via HTTP/HTTPS.
	// This field specifies the remote HTTP URI and how the fetched JWKS should be cached.
	RemoteJwks *HttpFilter_JwtAuthn_RemoteJwks `protobuf:"bytes,5,opt,name=remote_jwks,json=remoteJwks,proto3" json:"remote_jwks,omitempty"`
	// Add JWT claim to HTTP Header Specify the claim name you want to
	// copy in which HTTP header. For examples, following config:
	// The claim must be of type; string, int, double, bool.
	// Array type claims are not supported.
	ClaimToHeaders []*HttpFilter_JwtAuthn_ClaimToHeader `protobuf:"bytes,6,rep,name=claim_to_headers,json=claimToHeaders,proto3" json:"claim_to_headers,omitempty"`
	// Define where to extract the JWT from an HTTP request.
	FromHeaders []*HttpFilter_JwtAuthn_FromHeader `protobuf:"bytes,7,rep,name=from_headers,json=fromHeaders,proto3" json:"from_headers,omitempty"`
}

func (x *HttpFilter_JwtAuthn_Provider) Reset() {
	*x = HttpFilter_JwtAuthn_Provider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpFilter_JwtAuthn_Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpFilter_JwtAuthn_Provider) ProtoMessage() {}

func (x *HttpFilter_JwtAuthn_Provider) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpFilter_JwtAuthn_Provider.ProtoReflect.Descriptor instead.
func (*HttpFilter_JwtAuthn_Provider) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{1, 3, 3}
}

func (x *HttpFilter_JwtAuthn_Provider) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *HttpFilter_JwtAuthn_Provider) GetForward() bool {
	if x != nil {
		return x.Forward
	}
	return false
}

func (x *HttpFilter_JwtAuthn_Provider) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *HttpFilter_JwtAuthn_Provider) GetAudiences() []string {
	if x != nil {
		return x.Audiences
	}
	return nil
}

func (x *HttpFilter_JwtAuthn_Provider) GetRemoteJwks() *HttpFilter_JwtAuthn_RemoteJwks {
	if x != nil {
		return x.RemoteJwks
	}
	return nil
}

func (x *HttpFilter_JwtAuthn_Provider) GetClaimToHeaders() []*HttpFilter_JwtAuthn_ClaimToHeader {
	if x != nil {
		return x.ClaimToHeaders
	}
	return nil
}

func (x *HttpFilter_JwtAuthn_Provider) GetFromHeaders() []*HttpFilter_JwtAuthn_FromHeader {
	if x != nil {
		return x.FromHeaders
	}
	return nil
}

// This message specifies a Jwt requirement for a specific Route condition.
type HttpFilter_JwtAuthn_Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When the path parameter matches the specified prefixes.
	MatchPrefix string `protobuf:"bytes,1,opt,name=match_prefix,json=matchPrefix,proto3" json:"match_prefix,omitempty"`
	// Then it's required that the JWT token signature is valid for at least one of
	// the following providers referenced by its name.
	RequiredProvidersNames []string `protobuf:"bytes,2,rep,name=required_providers_names,json=requiredProvidersNames,proto3" json:"required_providers_names,omitempty"`
}

func (x *HttpFilter_JwtAuthn_Rule) Reset() {
	*x = HttpFilter_JwtAuthn_Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpFilter_JwtAuthn_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpFilter_JwtAuthn_Rule) ProtoMessage() {}

func (x *HttpFilter_JwtAuthn_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpFilter_JwtAuthn_Rule.ProtoReflect.Descriptor instead.
func (*HttpFilter_JwtAuthn_Rule) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{1, 3, 4}
}

func (x *HttpFilter_JwtAuthn_Rule) GetMatchPrefix() string {
	if x != nil {
		return x.MatchPrefix
	}
	return ""
}

func (x *HttpFilter_JwtAuthn_Rule) GetRequiredProvidersNames() []string {
	if x != nil {
		return x.RequiredProvidersNames
	}
	return nil
}

type InstanceSet_Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for this instance.
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Transport protocol available in the instance port.
	TransportProtocol TransportProtocol `protobuf:"varint,2,opt,name=transport_protocol,json=transportProtocol,proto3,enum=protomesh.types.v1.TransportProtocol" json:"transport_protocol,omitempty"`
	// Instance address (IPv4 or DNS).
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// Port number where the service is available.
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Instance region.
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	// Instance zone within the region.
	Zone string `protobuf:"bytes,6,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (x *InstanceSet_Instance) Reset() {
	*x = InstanceSet_Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceSet_Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSet_Instance) ProtoMessage() {}

func (x *InstanceSet_Instance) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSet_Instance.ProtoReflect.Descriptor instead.
func (*InstanceSet_Instance) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{3, 0}
}

func (x *InstanceSet_Instance) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *InstanceSet_Instance) GetTransportProtocol() TransportProtocol {
	if x != nil {
		return x.TransportProtocol
	}
	return TransportProtocol_TRANSPORT_PROTOCOL_UNDEFINED
}

func (x *InstanceSet_Instance) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *InstanceSet_Instance) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *InstanceSet_Instance) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *InstanceSet_Instance) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

// HTTP1 protocol options to connect to upstream.
type Service_Http1Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Service_Http1Options) Reset() {
	*x = Service_Http1Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service_Http1Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Http1Options) ProtoMessage() {}

func (x *Service_Http1Options) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Http1Options.ProtoReflect.Descriptor instead.
func (*Service_Http1Options) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{4, 0}
}

// HTTP2 protocol options to connect to upstream.
type Service_Http2Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//	Maximum concurrent streams allowed for peer on one HTTP/2 connection.
	//
	// Valid values range from 1 to 2147483647 (2^31 - 1) and defaults to 2147483647.
	MaxConcurrentStreams int32 `protobuf:"varint,1,opt,name=max_concurrent_streams,json=maxConcurrentStreams,proto3" json:"max_concurrent_streams,omitempty"`
}

func (x *Service_Http2Options) Reset() {
	*x = Service_Http2Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service_Http2Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Http2Options) ProtoMessage() {}

func (x *Service_Http2Options) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Http2Options.ProtoReflect.Descriptor instead.
func (*Service_Http2Options) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Service_Http2Options) GetMaxConcurrentStreams() int32 {
	if x != nil {
		return x.MaxConcurrentStreams
	}
	return 0
}

// Route (match path prefix to services)
type RoutingPolicy_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path prefix in the request to match.
	MatchPrefix string `protobuf:"bytes,1,opt,name=match_prefix,json=matchPrefix,proto3" json:"match_prefix,omitempty"`
	// Target service name when this route matches.
	TargetService string `protobuf:"bytes,2,opt,name=target_service,json=targetService,proto3" json:"target_service,omitempty"`
	// Timeout to connect to service in this route.
	Timeout *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Prefix rewrite to apply to the path before forwarding the request to the service.
	PrefixRewrite string `protobuf:"bytes,4,opt,name=prefix_rewrite,json=prefixRewrite,proto3" json:"prefix_rewrite,omitempty"`
}

func (x *RoutingPolicy_Route) Reset() {
	*x = RoutingPolicy_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_Route) ProtoMessage() {}

func (x *RoutingPolicy_Route) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_Route.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_Route) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{5, 0}
}

func (x *RoutingPolicy_Route) GetMatchPrefix() string {
	if x != nil {
		return x.MatchPrefix
	}
	return ""
}

func (x *RoutingPolicy_Route) GetTargetService() string {
	if x != nil {
		return x.TargetService
	}
	return ""
}

func (x *RoutingPolicy_Route) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *RoutingPolicy_Route) GetPrefixRewrite() string {
	if x != nil {
		return x.PrefixRewrite
	}
	return ""
}

// Cors policy: https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/cors/v3/cors.proto
type RoutingPolicy_Cors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies string patterns that match allowed origins. An origin is allowed if any of the string matchers match.
	AllowOriginStringMatchPrefix []string `protobuf:"bytes,1,rep,name=allow_origin_string_match_prefix,json=allowOriginStringMatchPrefix,proto3" json:"allow_origin_string_match_prefix,omitempty"`
	// Specifies the content for the access-control-allow-methods header.
	AllowMethods []string `protobuf:"bytes,2,rep,name=allow_methods,json=allowMethods,proto3" json:"allow_methods,omitempty"`
	// Specifies the content for the access-control-allow-headers header.
	AllowHeaders []string `protobuf:"bytes,3,rep,name=allow_headers,json=allowHeaders,proto3" json:"allow_headers,omitempty"`
	// Specifies the content for the access-control-expose-headers header.
	ExposeHeaders []string `protobuf:"bytes,4,rep,name=expose_headers,json=exposeHeaders,proto3" json:"expose_headers,omitempty"`
	// Specifies the content for the access-control-max-age header.
	MaxAge *durationpb.Duration `protobuf:"bytes,5,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
}

func (x *RoutingPolicy_Cors) Reset() {
	*x = RoutingPolicy_Cors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_types_v1_networking_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_Cors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_Cors) ProtoMessage() {}

func (x *RoutingPolicy_Cors) ProtoReflect() protoreflect.Message {
	mi := &file_api_types_v1_networking_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_Cors.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_Cors) Descriptor() ([]byte, []int) {
	return file_api_types_v1_networking_proto_rawDescGZIP(), []int{5, 1}
}

func (x *RoutingPolicy_Cors) GetAllowOriginStringMatchPrefix() []string {
	if x != nil {
		return x.AllowOriginStringMatchPrefix
	}
	return nil
}

func (x *RoutingPolicy_Cors) GetAllowMethods() []string {
	if x != nil {
		return x.AllowMethods
	}
	return nil
}

func (x *RoutingPolicy_Cors) GetAllowHeaders() []string {
	if x != nil {
		return x.AllowHeaders
	}
	return nil
}

func (x *RoutingPolicy_Cors) GetExposeHeaders() []string {
	if x != nil {
		return x.ExposeHeaders
	}
	return nil
}

func (x *RoutingPolicy_Cors) GetMaxAge() *durationpb.Duration {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

var File_api_types_v1_networking_proto protoreflect.FileDescriptor

var file_api_types_v1_networking_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xbc, 0x02, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0b,
	0x68, 0x74, 0x74, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48,
	0x00, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x44, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x02, 0x02, 0x08, 0x01, 0x42, 0x11,
	0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x22, 0xa7, 0x0b, 0x0a, 0x0a, 0x48, 0x74, 0x74, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x43, 0x0a, 0x08,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x77, 0x65, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x47,
	0x72, 0x70, 0x63, 0x57, 0x65, 0x62, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x70, 0x63, 0x57, 0x65,
	0x62, 0x12, 0x46, 0x0a, 0x09, 0x6a, 0x77, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x77, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x48, 0x00, 0x52,
	0x08, 0x6a, 0x77, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x1a, 0x29, 0x0a, 0x0b, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xb9, 0x02, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x1a, 0x26, 0x0a, 0x04, 0x43, 0x6f, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xba, 0xb9,
	0x02, 0x02, 0x10, 0x01, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x29, 0x0a, 0x07,
	0x47, 0x72, 0x70, 0x63, 0x57, 0x65, 0x62, 0x12, 0x1e, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xba, 0xb9, 0x02, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xef, 0x07, 0x0a, 0x08, 0x4a, 0x77, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6e, 0x12, 0x4e, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x77, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x4a, 0x77, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x4f, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x8f, 0x01, 0x0a, 0x0a, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x4a, 0x77, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xb9, 0x02, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x68, 0x74, 0x74, 0x70, 0x55, 0x72, 0x69, 0x12, 0x29, 0x0a, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0xb9, 0x02, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x60, 0x0a, 0x0a, 0x46,
	0x72, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0b, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0xb9, 0x02, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xb9, 0x02, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0xa4, 0x03,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0xb9, 0x02, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xba, 0xb9, 0x02, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xb9, 0x02, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x6a, 0x77, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x77, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4a, 0x77, 0x6b, 0x73,
	0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4a, 0x77, 0x6b, 0x73, 0x12, 0x5f, 0x0a, 0x10,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x77, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x2e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x55, 0x0a,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x4a, 0x77, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x46, 0x72, 0x6f,
	0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x1a, 0x63, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x38, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x02, 0x02, 0x08,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xc6, 0x01, 0x0a, 0x0b,
	0x48, 0x74, 0x74, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x78,
	0x64, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x78, 0x64, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x0b, 0x68, 0x74, 0x74, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x06, 0xba, 0xb9,
	0x02, 0x02, 0x08, 0x01, 0x22, 0xe6, 0x02, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0xd6, 0x01, 0x0a,
	0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x02, 0x02, 0x08, 0x01, 0x22, 0x97, 0x04,
	0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x78, 0x64, 0x73,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x78, 0x64, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x60, 0x0a, 0x16, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x31, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x31, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x48, 0x74, 0x74, 0x70, 0x31, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x60, 0x0a, 0x16,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x32, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x32, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x48, 0x74, 0x74, 0x70, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x6c, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x1a, 0x0e, 0x0a, 0x0c, 0x48, 0x74, 0x74, 0x70, 0x31, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x44, 0x0a, 0x0c, 0x48, 0x74, 0x74, 0x70, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x02, 0x02, 0x08, 0x01, 0x42, 0x27,
	0x0a, 0x25, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9f, 0x05, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a,
	0x04, 0x63, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43,
	0x6f, 0x72, 0x73, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x78, 0x64, 0x73,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x78, 0x64, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x1a, 0xad, 0x01, 0x0a, 0x05,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x72,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x1a, 0xf3, 0x01, 0x0a, 0x04,
	0x43, 0x6f, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1c,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67,
	0x65, 0x3a, 0x06, 0xba, 0xb9, 0x02, 0x02, 0x08, 0x01, 0x2a, 0xf5, 0x01, 0x0a, 0x0a, 0x48, 0x74,
	0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x4f,
	0x53, 0x54, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x50, 0x55, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x54, 0x54,
	0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x05, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x09, 0x2a, 0x6d, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x54,
	0x43, 0x50, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x44, 0x50, 0x10, 0x02,
	0x2a, 0x79, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41,
	0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x31, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x41,
	0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x32, 0x10, 0x02, 0x42, 0xe1, 0x01, 0x0a, 0x16,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2f,
	0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x54, 0x58, 0xaa, 0x02, 0x12,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x5c, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x6d,
	0x65, 0x73, 0x68, 0x5c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x6d, 0x65, 0x73, 0x68, 0x3a, 0x3a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_types_v1_networking_proto_rawDescOnce sync.Once
	file_api_types_v1_networking_proto_rawDescData = file_api_types_v1_networking_proto_rawDesc
)

func file_api_types_v1_networking_proto_rawDescGZIP() []byte {
	file_api_types_v1_networking_proto_rawDescOnce.Do(func() {
		file_api_types_v1_networking_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_types_v1_networking_proto_rawDescData)
	})
	return file_api_types_v1_networking_proto_rawDescData
}

var file_api_types_v1_networking_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_types_v1_networking_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_api_types_v1_networking_proto_goTypes = []interface{}{
	(HttpMethod)(0),                           // 0: protomesh.types.v1.HttpMethod
	(TransportProtocol)(0),                    // 1: protomesh.types.v1.TransportProtocol
	(ApplicationProtocol)(0),                  // 2: protomesh.types.v1.ApplicationProtocol
	(*NetworkingNode)(nil),                    // 3: protomesh.types.v1.NetworkingNode
	(*HttpFilter)(nil),                        // 4: protomesh.types.v1.HttpFilter
	(*HttpIngress)(nil),                       // 5: protomesh.types.v1.HttpIngress
	(*InstanceSet)(nil),                       // 6: protomesh.types.v1.InstanceSet
	(*Service)(nil),                           // 7: protomesh.types.v1.Service
	(*RoutingPolicy)(nil),                     // 8: protomesh.types.v1.RoutingPolicy
	(*HttpFilter_HealthCheck)(nil),            // 9: protomesh.types.v1.HttpFilter.HealthCheck
	(*HttpFilter_Cors)(nil),                   // 10: protomesh.types.v1.HttpFilter.Cors
	(*HttpFilter_GrpcWeb)(nil),                // 11: protomesh.types.v1.HttpFilter.GrpcWeb
	(*HttpFilter_JwtAuthn)(nil),               // 12: protomesh.types.v1.HttpFilter.JwtAuthn
	(*HttpFilter_JwtAuthn_ClaimToHeader)(nil), // 13: protomesh.types.v1.HttpFilter.JwtAuthn.ClaimToHeader
	(*HttpFilter_JwtAuthn_RemoteJwks)(nil),    // 14: protomesh.types.v1.HttpFilter.JwtAuthn.RemoteJwks
	(*HttpFilter_JwtAuthn_FromHeader)(nil),    // 15: protomesh.types.v1.HttpFilter.JwtAuthn.FromHeader
	(*HttpFilter_JwtAuthn_Provider)(nil),      // 16: protomesh.types.v1.HttpFilter.JwtAuthn.Provider
	(*HttpFilter_JwtAuthn_Rule)(nil),          // 17: protomesh.types.v1.HttpFilter.JwtAuthn.Rule
	(*InstanceSet_Instance)(nil),              // 18: protomesh.types.v1.InstanceSet.Instance
	(*Service_Http1Options)(nil),              // 19: protomesh.types.v1.Service.Http1Options
	(*Service_Http2Options)(nil),              // 20: protomesh.types.v1.Service.Http2Options
	(*RoutingPolicy_Route)(nil),               // 21: protomesh.types.v1.RoutingPolicy.Route
	(*RoutingPolicy_Cors)(nil),                // 22: protomesh.types.v1.RoutingPolicy.Cors
	(*durationpb.Duration)(nil),               // 23: google.protobuf.Duration
}
var file_api_types_v1_networking_proto_depIdxs = []int32{
	5,  // 0: protomesh.types.v1.NetworkingNode.http_ingress:type_name -> protomesh.types.v1.HttpIngress
	7,  // 1: protomesh.types.v1.NetworkingNode.service:type_name -> protomesh.types.v1.Service
	8,  // 2: protomesh.types.v1.NetworkingNode.routing_policy:type_name -> protomesh.types.v1.RoutingPolicy
	6,  // 3: protomesh.types.v1.NetworkingNode.instance_set:type_name -> protomesh.types.v1.InstanceSet
	10, // 4: protomesh.types.v1.HttpFilter.cors:type_name -> protomesh.types.v1.HttpFilter.Cors
	9,  // 5: protomesh.types.v1.HttpFilter.health_check:type_name -> protomesh.types.v1.HttpFilter.HealthCheck
	11, // 6: protomesh.types.v1.HttpFilter.grpc_web:type_name -> protomesh.types.v1.HttpFilter.GrpcWeb
	12, // 7: protomesh.types.v1.HttpFilter.jwt_authn:type_name -> protomesh.types.v1.HttpFilter.JwtAuthn
	4,  // 8: protomesh.types.v1.HttpIngress.http_filters:type_name -> protomesh.types.v1.HttpFilter
	18, // 9: protomesh.types.v1.InstanceSet.instances:type_name -> protomesh.types.v1.InstanceSet.Instance
	23, // 10: protomesh.types.v1.Service.connect_timeout:type_name -> google.protobuf.Duration
	19, // 11: protomesh.types.v1.Service.instance_http1_options:type_name -> protomesh.types.v1.Service.Http1Options
	20, // 12: protomesh.types.v1.Service.instance_http2_options:type_name -> protomesh.types.v1.Service.Http2Options
	21, // 13: protomesh.types.v1.RoutingPolicy.routes:type_name -> protomesh.types.v1.RoutingPolicy.Route
	22, // 14: protomesh.types.v1.RoutingPolicy.cors:type_name -> protomesh.types.v1.RoutingPolicy.Cors
	16, // 15: protomesh.types.v1.HttpFilter.JwtAuthn.providers:type_name -> protomesh.types.v1.HttpFilter.JwtAuthn.Provider
	17, // 16: protomesh.types.v1.HttpFilter.JwtAuthn.rules:type_name -> protomesh.types.v1.HttpFilter.JwtAuthn.Rule
	23, // 17: protomesh.types.v1.HttpFilter.JwtAuthn.RemoteJwks.timeout:type_name -> google.protobuf.Duration
	14, // 18: protomesh.types.v1.HttpFilter.JwtAuthn.Provider.remote_jwks:type_name -> protomesh.types.v1.HttpFilter.JwtAuthn.RemoteJwks
	13, // 19: protomesh.types.v1.HttpFilter.JwtAuthn.Provider.claim_to_headers:type_name -> protomesh.types.v1.HttpFilter.JwtAuthn.ClaimToHeader
	15, // 20: protomesh.types.v1.HttpFilter.JwtAuthn.Provider.from_headers:type_name -> protomesh.types.v1.HttpFilter.JwtAuthn.FromHeader
	1,  // 21: protomesh.types.v1.InstanceSet.Instance.transport_protocol:type_name -> protomesh.types.v1.TransportProtocol
	23, // 22: protomesh.types.v1.RoutingPolicy.Route.timeout:type_name -> google.protobuf.Duration
	23, // 23: protomesh.types.v1.RoutingPolicy.Cors.max_age:type_name -> google.protobuf.Duration
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_api_types_v1_networking_proto_init() }
func file_api_types_v1_networking_proto_init() {
	if File_api_types_v1_networking_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_types_v1_networking_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkingNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_networking_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_networking_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpIngress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_networking_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_networking_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_networking_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_networking_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpFilter_HealthCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_networking_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpFilter_Cors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_networking_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpFilter_GrpcWeb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_networking_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpFilter_JwtAuthn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_networking_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpFilter_JwtAuthn_ClaimToHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_networking_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpFilter_JwtAuthn_RemoteJwks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_networking_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpFilter_JwtAuthn_FromHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_networking_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpFilter_JwtAuthn_Provider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_networking_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpFilter_JwtAuthn_Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_networking_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceSet_Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_networking_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service_Http1Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_networking_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service_Http2Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_networking_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_types_v1_networking_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_Cors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_types_v1_networking_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*NetworkingNode_HttpIngress)(nil),
		(*NetworkingNode_Service)(nil),
		(*NetworkingNode_RoutingPolicy)(nil),
		(*NetworkingNode_InstanceSet)(nil),
	}
	file_api_types_v1_networking_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*HttpFilter_Cors_)(nil),
		(*HttpFilter_HealthCheck_)(nil),
		(*HttpFilter_GrpcWeb_)(nil),
		(*HttpFilter_JwtAuthn_)(nil),
	}
	file_api_types_v1_networking_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Service_InstanceHttp1Options)(nil),
		(*Service_InstanceHttp2Options)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_types_v1_networking_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_types_v1_networking_proto_goTypes,
		DependencyIndexes: file_api_types_v1_networking_proto_depIdxs,
		EnumInfos:         file_api_types_v1_networking_proto_enumTypes,
		MessageInfos:      file_api_types_v1_networking_proto_msgTypes,
	}.Build()
	File_api_types_v1_networking_proto = out.File
	file_api_types_v1_networking_proto_rawDesc = nil
	file_api_types_v1_networking_proto_goTypes = nil
	file_api_types_v1_networking_proto_depIdxs = nil
}
